{"version":3,"sources":["Home.js","CreateGame.js","App.js","serviceWorker.js","index.js"],"names":["Home","handleJoin","ev","preventDefault","console","log","target","gameCode","value","react_default","a","createElement","className","style","fontSize","mdbreact","onSubmit","this","name","color","label","outline","size","type","NavLink","textDecoration","to","cursor","paddingTop","Component","CreateGame","App","Switch","Route","exact","path","render","src_CreateGame","src_Home","Redirect","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SA2DeA,6MA7CbC,WAAa,SAACC,GACZA,EAAGC,iBAEHC,QAAQC,IAAIH,EAAGI,OAAOC,SAASC,gFAM/B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACC,SAAU,QAArB,qBAKAL,EAAAC,EAAAC,cAACI,EAAA,WAAD,CAAYC,SAAUC,KAAKhB,WAAYW,UAAU,eAE/CH,EAAAC,EAAAC,cAACI,EAAA,SAAD,CAAUG,KAAK,WAAWL,MAAO,CAACM,MAAO,cAAeC,MAAM,cAE9DX,EAAAC,EAAAC,cAACI,EAAA,OAAD,CACEM,SAAO,EACPF,MAAM,QACNG,KAAK,KACLC,KAAK,SACLX,UAAU,WALZ,WAWFH,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAASX,MAAO,CAACY,eAAgB,QAASC,GAAE,sBAC1CjB,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACc,OAAQ,WAAYf,UAAU,aACzCH,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACe,WAAY,MAAOd,SAAU,UAAzC,0BAxCKe,aCWJC,mLAdX,OAEErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAEhBH,EAAAC,EAAAC,cAAA,mCARekB,qCCqCVE,mLAvBX,OACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KAEEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,qBAAqBC,OAAQ,kBAC3C3B,EAAAC,EAAAC,cAAC0B,EAAD,SAGJ5B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,eAAeC,OAAQ,kBACrC3B,EAAAC,EAAAC,cAAC2B,EAAD,SAGJ7B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOG,OAAQ,WACb,OAEE3B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAUb,GAAE,4BAjBNG,aCDEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVNC,IAAST,OACP3B,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACErC,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOc,UAAWhB,KAEpBiB,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.546d324e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n// import {firestore} from './base.js';\n\nimport { NavLink } from 'react-router-dom'\n\nimport { FormInline, Button, MDBInput } from 'mdbreact';\n\nclass Home extends Component {\n\n  // constructor() {\n  //   super();\n  // }\n\n  handleJoin = (ev) => {\n    ev.preventDefault()\n\n    console.log(ev.target.gameCode.value)\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p style={{fontSize: \"2em\"}}>\n            To Hell and Back!\n          </p>\n      \n\n          <FormInline onSubmit={this.handleJoin} className=\"md-form m-0\">\n        \n            <MDBInput name='gameCode' style={{color: \"whitesmoke\"}} label=\"Game Code\" />\n            \n            <Button\n              outline\n              color=\"white\"\n              size=\"sm\"\n              type=\"submit\"\n              className=\"mr-auto\"\n            >\n              Search\n            </Button>\n          </FormInline>\n\n          <NavLink style={{textDecoration: 'none'}} to={`/ToHell/CreateGame`}>\n            <div style={{cursor: 'pointer'}} className='sideHover'>\n              <h6 style={{paddingTop: \"3em\", fontSize: '0.7em'}}>Create Game</h6>\n            </div>\n          </NavLink>\n        \n        </header>\n      </div>\n\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n\nclass CreateGame extends Component {\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n          \n          <p>Creating Game</p>\n\n        </header>\n      </div>\n\n    );\n  }\n}\n\nexport default CreateGame;\n","import React, { Component } from 'react';\nimport './App.css';\n// import {firestore} from './base.js';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\n\nimport Home from './Home'\nimport CreateGame from './CreateGame'\n\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Switch>\n\n        <Route exact path='/ToHell/CreateGame' render={() => (\n            <CreateGame />\n        )}/>\n        \n        <Route exact path='/ToHell/Home' render={() => (\n            <Home/>\n        )}/>\n\n        <Route render={() => {\n          return (\n            // eslint-disable-next-line\n            <Redirect to={`/ToHell/Home`} />\n          )\n        }}/>\n\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <Route component={App} />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}